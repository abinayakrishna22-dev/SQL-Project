#SQL Project 1

select * from customers;
select * FROM orderS;
select * from order_details;
select * from products;
select * from employees;

#1)Find the top 10 customers by total purchase amount.

Select c.CUSTOMERID, c.FirstName, c.LastName, round(sum(o.TOTALAMOUNT)) AS Total_purchase
FROM ORDERS o 
join customers c
on c.customerid = o.customerid
GROUP BY c.CUSTOMERID,c.FirstName, c.LastName
ORDER BY Total_purchase desc
limit 10;

#2)Show total sales revenue per month for the last 2 years

select date_format(OrderDate, '%Y-%m-01') AS order_date, 
		round(sum(TotalAmount),2) as Total_revenue
from orders
WHERE OrderDate >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR)
group by order_date
order by order_date;

#3)Find the total revenue generated by each employee and rank them.
select e.FirstName, e.LastName, o.EmployeeID, round(sum(TotalAmount),0) as Total_rev, 
		rank() over (order by sUM(o.TotalAmount) DESC) as Revenue_rank
from orders o
join employees e
on o.employeeid = e.employeeid
group by e.FirstName, e.LastName, o.EmployeeID
order by Total_rev desc;

#4)Calculate the total sales and quantity sold for each product

select od.ProductID, p.ProductName, sum(od.Quantity) as quantity_sold, round(sum(od.linetotal)) as Total_sales
from order_details od
join products p 
on od.ProductID = p.ProductID
group by od.productid, p.ProductName
order by total_sales desc;

#5)Compute the average order value (AOV) across each customers.

select c.FirstName, c.LastName, round(avg(o.TotalAmount),0) as Average
from orders o
join customers c
on c.CustomerID=o.CustomerID
group by c.FirstName, c.LastName
order by average desc;

#6)Find the average number of orders placed per customer

select ROUND(AVG(orders_count), 2) AS avg_orders_per_customer
from 
(select CustomerID, count(*) as orders_count
from orders
group by CustomerID) t;

#7)Find the top-selling product (by revenue) in each category.

SELECT Category, ProductID, ProductName, revenue
from(
select p.Category, 
		p.ProductID,
		p.ProductName, 
        round (sum(od.LineTotal)) as Revenue,
        row_number() over (partition by p.Category order by sum(od.LineTotal) desc) as rn
from order_details od
join products p
on od.ProductID = p.ProductID
group by p.Category, p.ProductID,p.ProductName) ranked
where rn =1;

#8.Calculate the total revenue contributed by each customer.

SELECT c.CustomerID, c.FirstName, c.LastName,
       ROUND(SUM(o.TotalAmount), 2) AS lifetime_value,
       COUNT(*) AS orders_count,
       MIN(o.OrderDate) AS first_order,
       MAX(o.OrderDate) AS last_order
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID, c.FirstName, c.LastName
ORDER BY lifetime_value DESC;

#9)Find how many customers placed only 1 order vs. more than 1 order.

SELECT SUM(CASE WHEN orders_count = 1 THEN 1 ELSE 0 END) AS one_time_customers,
       SUM(CASE WHEN orders_count > 1 THEN 1 ELSE 0 END) AS repeat_customers
FROM (
  SELECT CustomerID, COUNT(*) AS orders_count
  FROM Orders
  GROUP BY CustomerID
) t;

#10.Compare total revenue in 2022 vs. 2023

SELECT
  SUM(CASE WHEN YEAR(OrderDate) = 2022 THEN TotalAmount ELSE 0 END) AS rev_2022,
  SUM(CASE WHEN YEAR(OrderDate) = 2023 THEN TotalAmount ELSE 0 END) AS rev_2023
FROM Orders;

#11.Classify orders as Small (<$100), Medium ($100–$500), Large (>$500) and count how many fall into each bucket.

Select bucket, count(*) as Total_orders
from
(SELECT CASE 
		WHEN TOTALAMOUNT < 100 THEN 'Small (<$100)'
        WHEN TOTALAMOUNT >= 500 THEN 'Medium ($100–$500)'
        ELSE 'Large (>$500)'
        END AS Bucket
        from orders)t
group by bucket;

#12.Identify the top 5% of customers who contribute the most revenue.

SELECT CustomerID, revenue
FROM (
  SELECT CustomerID, SUM(TotalAmount) AS revenue,
         NTILE(20) OVER (ORDER BY SUM(TotalAmount) DESC) AS ventile
  FROM Orders
  GROUP BY CustomerID
) t
WHERE ventile = 1
ORDER BY revenue DESC;

#13.Group customers by the month of their first purchase. Track how many of them placed repeat orders in subsequent months.

SELECT YEAR(o.OrderDate) AS order_year,
       MONTH(o.OrderDate) AS order_month,
       COUNT(DISTINCT o.CustomerID) AS active_customers
FROM Orders o
GROUP BY YEAR(o.OrderDate), MONTH(o.OrderDate)
ORDER BY order_year, order_month;

#14. Show sales trends by month across multiple years. Highlight which months consistently perform the best 

SELECT MONTH_NUM, round(avg( monthly_rev),2) as avr_rev
FROM
  (SELECT YEAR(Orderdate) AS yr, MONTH(OrderDate) AS month_num,
         SUM(TotalAmount) AS monthly_rev
  FROM Orders
  GROUP BY YEAR(OrderDate), MONTH(OrderDate)) t1
  group by month_num
  order by avr_rev desc;
